"""
Move the directories generated by [LeetHub](https://github.com/QasimWani/LeetHub)
to the 'leetcode' directory, with the question number is added as prefix.
"""
import re
import shutil
from pathlib import Path
from typing import Tuple

EXCLUDED = ['codility', 'leetcode', 'others']
WORKDIR = Path('.')
TARGET_DIRECTORY = WORKDIR / 'leetcode'
EXISTING_QUESTIONS = TARGET_DIRECTORY.glob('*')


def parse_leetcode_number(question_directory: Path) -> Tuple[bool, str]:
    """ Parse Leetcode question number from the README generated by LeetHub."""
    question_number = '0'  # default

    readme_path: Path = question_directory / 'README.md'
    if not readme_path.exists() or not readme_path.is_file():
        return False, question_number

    readme_text: str = readme_path.read_text()
    matched: re.Match = re.search('^<h2>(\d+)\..*', readme_text)
    if matched:
        question_number = matched.groups()[0]
        return True, question_number.zfill(5)

    return False, question_number


def main():
    TARGET_DIRECTORY.mkdir(exist_ok=True)

    # mapping from raw question name to name with number as prefix
    existing_q_mapping = {q.name.split('_')[-1]: q.name for q in EXISTING_QUESTIONS}

    for path in WORKDIR.glob('*'):
        if path.is_file():
            continue
        if path.name in EXCLUDED or path.name.startswith('.'):
            continue

        # handle questions that are already answered
        if path.name in existing_q_mapping:
            existing_dir = TARGET_DIRECTORY / existing_q_mapping[path.name]
            for src in path.glob('*'):
                dest = existing_dir / src.name
                if dest.exists():
                    dest.unlink()
                src.rename(dest)
            shutil.rmtree(path)
            continue
        
        # handle newly-added questions
        ok, leetcode_number = parse_leetcode_number(path)
        if not ok:
            continue

        dest = TARGET_DIRECTORY / f"{leetcode_number}_{path.name}"
        path.rename(dest)


if __name__ == "__main__":
    main()
